
pub mod types;

use types::{ffi, conversion};

pub mod helpers;

use std::ffi::c_void;

pub use conversion::FfiConversionError;

#[derive(Clone, Copy)]
pub struct PluginState(*mut c_void);

unsafe impl Send for PluginState {}
unsafe impl Sync for PluginState {}

impl From<*mut c_void> for PluginState {
    fn from(value: *mut c_void) -> Self {
        Self(value)
    }
}

impl From<PluginState> for *mut c_void {
    fn from(value: PluginState) -> Self {
        value.0
    }
}

// Plugin implementation functions
extern "C" {

/// Implement this function to have a setup function run when your plugin is
/// first loaded or enabled. The returned void pointer can point to any persistent
/// state that your plugin needs to keep track of. It will be passed to all
/// subsequent calls to your plugin, and will not be touched by the server.
/// Make sure to also implement impl_plugin_teardown() to free the memory
/// it points to.
pub fn impl_plugin_setup() -> *mut c_void;

/// Implement this function to free your plugin's state pointer
pub fn impl_plugin_teardown(plugin_state: *mut c_void);

/// Implement this function (and impl_encode_resp) to have your plugin
/// register as having a Listener module
/// 
/// Decodes request recieved on associated UDP socket into a DNS protocol
/// message with queries to be resolved
pub fn impl_listener_sync_decode_req(
    req: ffi::ByteVector, message: *mut ffi::DnsMessage, plugin_state: *mut c_void
) -> u8;

/// Implement this function (and impl_decode_req) to have your plugin
/// register as having a Listener module
/// 
/// Encodes responses generated by the resolver into a response to send
/// back to the requester over the original UDP socket
pub fn impl_listener_sync_encode_resp(
    resp: *const ffi::DnsMessage, buf: *mut ffi::ByteVector, plugin_state: *mut c_void
) -> u8;

/// Implement this function for your plugin to register as having a Resolver module.
/// 
/// Resolves a request generated by the Listener into a response message, likely
/// by querying (an) upstream resolver(s)
pub fn impl_resolver_sync_resolve_req(
    req: *const ffi::DnsMessage, resp: *mut ffi::DnsMessage, plugin_state: *mut c_void
) -> u8;

}

